// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// example_manually_hooked
Rcpp::NumericVector example_manually_hooked();
RcppExport SEXP RcppHoney_example_manually_hooked() {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    __result = Rcpp::wrap(example_manually_hooked());
    return __result;
END_RCPP
}
// test_hooked_plus_scalar
Rcpp::NumericVector test_hooked_plus_scalar(std::vector< int > v1, double s);
RcppExport SEXP RcppHoney_test_hooked_plus_scalar(SEXP v1SEXP, SEXP sSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< std::vector< int > >::type v1(v1SEXP);
    Rcpp::traits::input_parameter< double >::type s(sSEXP);
    __result = Rcpp::wrap(test_hooked_plus_scalar(v1, s));
    return __result;
END_RCPP
}
// test_scalar_plus_hooked
Rcpp::NumericVector test_scalar_plus_hooked(double s, std::vector< int > v1);
RcppExport SEXP RcppHoney_test_scalar_plus_hooked(SEXP sSEXP, SEXP v1SEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< double >::type s(sSEXP);
    Rcpp::traits::input_parameter< std::vector< int > >::type v1(v1SEXP);
    __result = Rcpp::wrap(test_scalar_plus_hooked(s, v1));
    return __result;
END_RCPP
}
// test_hooked_plus_hooked
Rcpp::NumericVector test_hooked_plus_hooked(std::vector< int > v1, std::vector< int > v2);
RcppExport SEXP RcppHoney_test_hooked_plus_hooked(SEXP v1SEXP, SEXP v2SEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< std::vector< int > >::type v1(v1SEXP);
    Rcpp::traits::input_parameter< std::vector< int > >::type v2(v2SEXP);
    __result = Rcpp::wrap(test_hooked_plus_hooked(v1, v2));
    return __result;
END_RCPP
}
// test_hooked_plus_other_hooked
Rcpp::NumericVector test_hooked_plus_other_hooked(std::vector< int > v1, Rcpp::NumericVector v2);
RcppExport SEXP RcppHoney_test_hooked_plus_other_hooked(SEXP v1SEXP, SEXP v2SEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< std::vector< int > >::type v1(v1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type v2(v2SEXP);
    __result = Rcpp::wrap(test_hooked_plus_other_hooked(v1, v2));
    return __result;
END_RCPP
}
// test_other_hooked_plus_hooked
Rcpp::NumericVector test_other_hooked_plus_hooked(Rcpp::NumericVector v1, std::vector< int > v2);
RcppExport SEXP RcppHoney_test_other_hooked_plus_hooked(SEXP v1SEXP, SEXP v2SEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type v1(v1SEXP);
    Rcpp::traits::input_parameter< std::vector< int > >::type v2(v2SEXP);
    __result = Rcpp::wrap(test_other_hooked_plus_hooked(v1, v2));
    return __result;
END_RCPP
}
// test_operand_plus_scalar
Rcpp::NumericVector test_operand_plus_scalar(std::vector< int > v1, std::vector< int > v2, double s);
RcppExport SEXP RcppHoney_test_operand_plus_scalar(SEXP v1SEXP, SEXP v2SEXP, SEXP sSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< std::vector< int > >::type v1(v1SEXP);
    Rcpp::traits::input_parameter< std::vector< int > >::type v2(v2SEXP);
    Rcpp::traits::input_parameter< double >::type s(sSEXP);
    __result = Rcpp::wrap(test_operand_plus_scalar(v1, v2, s));
    return __result;
END_RCPP
}
// test_scalar_plus_operand
Rcpp::NumericVector test_scalar_plus_operand(double s, std::vector< int > v1, std::vector< int > v2);
RcppExport SEXP RcppHoney_test_scalar_plus_operand(SEXP sSEXP, SEXP v1SEXP, SEXP v2SEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< double >::type s(sSEXP);
    Rcpp::traits::input_parameter< std::vector< int > >::type v1(v1SEXP);
    Rcpp::traits::input_parameter< std::vector< int > >::type v2(v2SEXP);
    __result = Rcpp::wrap(test_scalar_plus_operand(s, v1, v2));
    return __result;
END_RCPP
}
// test_operand_plus_hooked
Rcpp::NumericVector test_operand_plus_hooked(std::vector< int > v1, std::vector< int > v2, Rcpp::NumericVector v3);
RcppExport SEXP RcppHoney_test_operand_plus_hooked(SEXP v1SEXP, SEXP v2SEXP, SEXP v3SEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< std::vector< int > >::type v1(v1SEXP);
    Rcpp::traits::input_parameter< std::vector< int > >::type v2(v2SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type v3(v3SEXP);
    __result = Rcpp::wrap(test_operand_plus_hooked(v1, v2, v3));
    return __result;
END_RCPP
}
// test_hooked_plus_operand
Rcpp::NumericVector test_hooked_plus_operand(Rcpp::NumericVector v1, std::vector< int > v2, std::vector< int > v3);
RcppExport SEXP RcppHoney_test_hooked_plus_operand(SEXP v1SEXP, SEXP v2SEXP, SEXP v3SEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type v1(v1SEXP);
    Rcpp::traits::input_parameter< std::vector< int > >::type v2(v2SEXP);
    Rcpp::traits::input_parameter< std::vector< int > >::type v3(v3SEXP);
    __result = Rcpp::wrap(test_hooked_plus_operand(v1, v2, v3));
    return __result;
END_RCPP
}
// test_operand_plus_operand
Rcpp::NumericVector test_operand_plus_operand(double s, std::vector< int > v1, std::vector< int > v2);
RcppExport SEXP RcppHoney_test_operand_plus_operand(SEXP sSEXP, SEXP v1SEXP, SEXP v2SEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< double >::type s(sSEXP);
    Rcpp::traits::input_parameter< std::vector< int > >::type v1(v1SEXP);
    Rcpp::traits::input_parameter< std::vector< int > >::type v2(v2SEXP);
    __result = Rcpp::wrap(test_operand_plus_operand(s, v1, v2));
    return __result;
END_RCPP
}
// test_unary_operator_hooked
Rcpp::NumericVector test_unary_operator_hooked(std::vector< int > v);
RcppExport SEXP RcppHoney_test_unary_operator_hooked(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< std::vector< int > >::type v(vSEXP);
    __result = Rcpp::wrap(test_unary_operator_hooked(v));
    return __result;
END_RCPP
}
// test_unary_operator_operand
Rcpp::NumericVector test_unary_operator_operand(std::vector< int > v);
RcppExport SEXP RcppHoney_test_unary_operator_operand(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< std::vector< int > >::type v(vSEXP);
    __result = Rcpp::wrap(test_unary_operator_operand(v));
    return __result;
END_RCPP
}
// test_unary_function_hooked
Rcpp::NumericVector test_unary_function_hooked(std::vector< int > v);
RcppExport SEXP RcppHoney_test_unary_function_hooked(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< std::vector< int > >::type v(vSEXP);
    __result = Rcpp::wrap(test_unary_function_hooked(v));
    return __result;
END_RCPP
}
// test_unary_function_operand
Rcpp::NumericVector test_unary_function_operand(std::vector< int > v);
RcppExport SEXP RcppHoney_test_unary_function_operand(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< std::vector< int > >::type v(vSEXP);
    __result = Rcpp::wrap(test_unary_function_operand(v));
    return __result;
END_RCPP
}
